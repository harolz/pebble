@ Define lowest Reduce
Line -> def Ref

### Grammar


@ Add + Reduce
Expr -> Expr + Expr

@ Subtract - Reduce
Expr -> Expr - Expr

@ Multiply * Reduce
Expr -> Expr * Expr

@ Divide / Reduce
Expr -> Expr / Expr

@ And && Reduce
Expr -> Expr && Expr

@ And and Reduce
Expr -> Expr and Expr



@ Print lowest Reduce
Line -> print Expr

@ Evaluate highest Merge
Expr -> Ref ( Expr )

@ If highest Reduce
Line -> if ( Expr ) :

@ While highest Reduce
Line -> while ( Expr ) :

@ For highest Reduce
Line -> for ( Ref in Expr ) :

@ DefineMethod highest Custom
Line -> def Ref ( Expr ) :

@ DefineMethod highest Custom
Line -> def Ref ( ) :

@ Assign = Reduce
Line -> Expr = Expr








@ Parens highest Retain
Expr -> ( Expr )



@ Param , Merge
Expr -> Expr , Expr

@ Ref subhighest Retain
Expr -> Ref

@ LineRef lowest Retain
Line -> Expr 



### Operator Precedence
: in
highest
( [ .
subhighest
!
* /
+ -
< > <= >=
== !=
&& and
|| or
=  
,
)
lowest

### End 

